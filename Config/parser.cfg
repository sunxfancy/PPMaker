%{
#include "Node.h"
%}

%type Node* program package package_name module_def_keyword
%type Node* module_def_keyword module_def_statement func_def_name
%type Node* func_def_xs def_statement def_statements statements statement if_state while_state dowhile_state dountil_state for_state statement return_state woven_state block


%right "="
%right "&=" "|=" "^=" "<<=" ">>="
%right "+=" "-="
%right "*=" "/="
%left "&&" "||"
%left "&" "|" "^"
%left "<" ">" "<=" ">=" "=="
%left "+" "-"
%left "*" "/" "%"
%left "."
%right "~" "++" "--" "!"
%left "(" "[" ")" "]"


<program> = <def_statements:v> {{ setRoot(getList(v)) }} ;

<package> = "package" <package_name:pname> ";" {{ return pname; }}
          ;

<package_name> = [id:name] {{ return name.val; }}
               | <package_name:before> "." [id:name] {{ return before + "." + name.val; }}
               ;

<module_def_keyword> = "module" {{ return "module" }}
                     | "class"  {{ return "class" }}
                     | "struct" {{ return "struct" }}
                     ;

<module_def_statement> = <module_def_keyword:key> [id:name] <block:def> {{
                            return makeList(newIDNode(key), newIDNode(name.val), def);
                        }}
                        | <module_def_keyword:key> [id:name] ";" {{
                            return makeList(newIDNode(key), newIDNode(name.val), newNode());
                        }}
                        ;

<func_def_name> = "static" {{ return "static"; }}
                | "extern" {{ return "extern"; }}
                | "virtual" {{ return "virtual"; }}
                | "abstract" {{ return "abstract"; }}
                | "in" {{ return "in"; }}
                | "out" {{ return "out"; }}
                ;

<func_def_xs> = <func_def_name:n> {{ return newIDNode(n); }}
			  | <func_def_xs:l> <func_def_name:n> {{ addBrother(l, newIDNode(n));  return l; }}
			  ;

<def_statement> = <var_def:v> ";" {{ return v; }}
                | <func_def:v>  {{ return v; }}
                | <marco_def:v> {{ return v; }}
                | <macro_call:v> {{ return v; }}
                | "`" <full_list:v> {{ return v; }}
                | <module_def_statement:v> {{ return v; }}
                | <func_def_xs:xs> <func_def:def> {{ addBrother(def, newParent(xs)); return def; }}
                ;

<def_statements> = <def_statement:v> {{ return getList(v); }}
                 | <def_statements:l> <def_statement:v> {{ addBrother(l, getList(v)); return l; }}
                 ;

<statements> = <statement:v> {{ return getList(v) }}
             | <statements:l> <statement:v>  {{ addBrother(l, getList(v)); return l; }}
             ;

<statement> = <def_statement:v>  {{ return v; }}
            | <expr:v> ";"  {{ return v; }}
            | <block:v>  {{ return v; }}
            | <if_state:v> {{ return v; }}
            | <while_state:v> {{ return v; }}
            | <dowhile_state:v> {{ return v; }}
            | <dountil_state:v> {{ return v; }}
            | <for_state:v> {{ return v; }}
            | <return_state:v> {{ return v; }}
            | <delete_expr:v> {{ return v; }}
            | "break" ";" {{ return makeList(newIDNode("break")) }}
            | "continue" ";" {{ return makeList(newIDNode("continue")) }}
            ;

<if_state> = "if" "(" <expr:exp> ")" <statement:s> {{ return makeList(newIDNode("if"), exp, s) }}
           | "if" "(" <expr:exp> ")" <statement:s> "else" <statement:s2> {{
                return makeList(newIDNode("if"), exp, s, s2);
            }}
           ;

<while_state> = "while" "(" <expr:exp> ")" <statement:s>
                {{ return makeList(newIDNode("while"), exp, s); }}
              ;

<dowhile_state> = "do" <statement:s> "while" "(" <expr:exp> ")" ";"
                {{ return makeList(newIDNode("dowhile"), s, exp); }}
                ;

<dountil_state> = "do" <statement:s> "until" "(" <expr:exp> ")" ";"
                {{ return makeList(newIDNode("dountil"), s, exp); }}
                ;

<for_state> = "for" "(" <expr:init> ";" <expr:pd> ";" <expr:work> ")" <statement:s>
                {{ return makeList(newIDNode("for"), init, pd, work, s); }}
            | "for" "(" <var_def:init> ";" <expr:pd> ";" <expr:work> ")" <statement:s>
                {{ return makeList(newIDNode("for"), init, pd, work, s); }}
            ;

<return_state> = "return" ";" {{ return newIDNode("return") }}
               | "return" <expr:exp> ";" {{l = newIDNode("return"); addBrother(l, getList(exp)); return l;}}
               ;

<woven_state> = "woven" [id:id] "(" <call_args:args> ")"
                {{ l = makeList(newIDNode("woven"), newIDNode(id.val)); addBrother(l, args); return l;}}
              ;

<block> = "{" <statements:s> "}" {{ return newParent(s) }}
        | "{" "}"  {{ return newNode(); }}
        ;

<types> = [id:id] {{ return newTypeNode(id.val, false, false); }}
      | "const" [id:id]  {{ return newTypeNode(id.val, true, false); }}
      | "*" [id:id] {{ return newTypeNode(id.val, false, true); }}
      | "const" "*" [id:id] {{ return newTypeNode(id.val, true, true); }}
      | <types:t> [sz]  {{ addDimension(t); return t; }}
      ;

<var_def> = <types:t> [id:id] {{ return makeList(newIDNode("set"), t, newIDNode(id.val)); }}
          | <types:t> [id:id] "=" <expr:init> {{
            return makeList(newIDNode("set"), t, newIDNode(id.val), init); }}
          ;


<macro_def_args> = [id:id] {{ return newIDNode(id.val); }}
                 | <macro_def_args:args> "," [id:id]
                 {{ addBrother(args, newIDNode(id.val));  return args; }}
                 ;

<marco_def> = "defmacro" [id:id] "(" <macro_def_args:args> ")" <block:b>
                {{return makeList(newIDNode("defmacro"), newIDNode(id.val), args, b);}}
            ;

<macro_call> = "@" [id:id] {{ return newIDNode(id.val); }}
             | <macro_call:m> "(" <macro_call_args:args> ")" {{ addBrother(m, args); return m; }}
             | <macro_call:m> <block:b> {{ addBrother(m, getList(b)); return m; }}
             | <macro_call:m> [id:id] <block:b>
             {{ addBrother(m, newIDNode(id.val)); addBrother(m, getList(b)); return m; }}
             ;

<func_def> = <types:t> <package_name:id> "(" <func_def_args:args> ")" <block:b>
            {{ return makeList(newIDNode("function"), t, newIDNode(id), args, b); }}
           | <types:t> <package_name:id> "(" <func_def_args:args> ")" ";"
            {{ return makeList(newIDNode("function"), t, newIDNode(id), args, newNode()); }}
           ;

<func_def_args> = <var_def:v> {{ return newParent(newParent(v)); }}
                | <func_def_args:args> "," <var_def:v>
                {{ addChildren(args, newParent(v)); return args; }}
                | e  {{ return newNode(); }}
                ;

<new_expr> = "new" <types:t> {{ return makeList(newIDNode("new"), t, newNode()); }}
           | "new" <types:t> "(" <call_args:args> ")"
           {{ return makeList(newIDNode("new"), t, newParent(args)); }}
           | <new_expr:n>    "[" <call_args:args> "]"  {{ addBrother(n, newParent(args)); return n;}}
           ;

<delete_expr> = "delete" <expr:exp> {{ return make_list(newIDNode("delete"), exp); }}
            | "delete" [sz] <expr:exp> {{ return make_list(newIDNode("delete[]"), exp); }}
            ;

<numeric> = [int:i] {{ return newIntNode(i.val); }}
          | [float:f] {{ return newFloatNode(f.val); }}
          ;

<var_exp> = [id:id] {{ return newIDNode(id.val); }}
          | <numeric:n> {{ return n; }}
          | [string:s] {{ return newStringNode(s.val); }}
          | "null" {{ return newIDNode("null"); }}
          | "true" {{ return newIDNode("true"); }}
          | "false" {{ return newIDNode("false"); }}
          ;

<expr>  = <expr:e1> "=" <expr:e2> {{ return makeList(newIDNode("opt2"), newIDNode("="), e1, e2); }}
        | <expr:e1> "(" <call_args:args> ")" {{ l = makeList(newIDNode("call"), e1); if args then addBrother(l, args); end; return l; }}
        | <expr:e1> "[" <call_args:args> "]" {{ l = makeList(newIDNode("select"), e1); if args then addBrother(l, args); end; return l; }}
        | <new_expr:v> {{ return v; }}
        | <var_exp:v> {{ return v; }}
        | <expr:e1> "==" <expr:e2>  {{ return makeList(newIDNode("opt2"), newIDNode("=="), e1, e2); }}
        | <expr:e1> "!=" <expr:e2>  {{ return makeList(newIDNode("opt2"), newIDNode("!="), e1, e2); }}
        | <expr:e1> "<=" <expr:e2>  {{ return makeList(newIDNode("opt2"), newIDNode("<="), e1, e2); }}
        | <expr:e1> ">=" <expr:e2>  {{ return makeList(newIDNode("opt2"), newIDNode(">="), e1, e2); }}
        | <expr:e1> "&&" <expr:e2>  {{ return makeList(newIDNode("opt2"), newIDNode("&&"), e1, e2); }}
        | <expr:e1> "||" <expr:e2>  {{ return makeList(newIDNode("opt2"), newIDNode("||"), e1, e2); }}
        | <expr:e1> ">=" <expr:e2>  {{ return makeList(newIDNode("opt2"), newIDNode(">="), e1, e2); }}
        | <expr:e1> "<" <expr:e2>  {{ return makeList(newIDNode("opt2"), newIDNode("<"), e1, e2); }}
        | <expr:e1> ">" <expr:e2>  {{ return makeList(newIDNode("opt2"), newIDNode(">"), e1, e2); }}
        | <expr:e1> "<" "<" <expr:e2>  {{ return makeList(newIDNode("opt2"), newIDNode("<<"), e1, e2); }}
        | <expr:e1> ">" ">" <expr:e2>  {{ return makeList(newIDNode("opt2"), newIDNode(">>"), e1, e2); }}
        | <expr:e1> "+" <expr:e2>  {{ return makeList(newIDNode("opt2"), newIDNode("+"), e1, e2); }}
        | <expr:e1> "-" <expr:e2>  {{ return makeList(newIDNode("opt2"), newIDNode("-"), e1, e2); }}
        | <expr:e1> "*" <expr:e2>  {{ return makeList(newIDNode("opt2"), newIDNode("*"), e1, e2); }}
        | <expr:e1> "/" <expr:e2>  {{ return makeList(newIDNode("opt2"), newIDNode("/"), e1, e2); }}
        | <expr:e1> "%" <expr:e2>  {{ return makeList(newIDNode("opt2"), newIDNode("%"), e1, e2); }}
        | <expr:e1> "^" <expr:e2>  {{ return makeList(newIDNode("opt2"), newIDNode("^"), e1, e2); }}
        | <expr:e1> "&" <expr:e2>  {{ return makeList(newIDNode("opt2"), newIDNode("&"), e1, e2); }}
        | <expr:e1> "|" <expr:e2>  {{ return makeList(newIDNode("opt2"), newIDNode("|"), e1, e2); }}
        | <expr:e1> "+=" <expr:e2>  {{ return makeList(newIDNode("opt2"), newIDNode("+="), e1, e2); }}
        | <expr:e1> "-=" <expr:e2>  {{ return makeList(newIDNode("opt2"), newIDNode("-="), e1, e2); }}
        | <expr:e1> "*=" <expr:e2>  {{ return makeList(newIDNode("opt2"), newIDNode("*="), e1, e2); }}
        | <expr:e1> "/=" <expr:e2>  {{ return makeList(newIDNode("opt2"), newIDNode("/="), e1, e2); }}
        | <expr:e1> "%=" <expr:e2>  {{ return makeList(newIDNode("opt2"), newIDNode("%="), e1, e2); }}
        | <expr:e1> "^=" <expr:e2>  {{ return makeList(newIDNode("opt2"), newIDNode("^="), e1, e2); }}
        | <expr:e1> "&=" <expr:e2>  {{ return makeList(newIDNode("opt2"), newIDNode("&="), e1, e2); }}
        | <expr:e1> "|=" <expr:e2>  {{ return makeList(newIDNode("opt2"), newIDNode("|="), e1, e2); }}
        | <expr:e1> "<<=" <expr:e2>  {{ return makeList(newIDNode("opt2"), newIDNode("<<="), e1, e2); }}
        | <expr:e1> ">>=" <expr:e2>  {{ return makeList(newIDNode("opt2"), newIDNode(">>="), e1, e2); }}
        | <expr:e1> "." <expr:e2>  {{ return makeList(newIDNode("opt2"), newIDNode("."), e1, e2); }}
        | "-" <expr:e1> {{ return makeList(newIDNode("opt1"), newIDNode("-"), e1) }}
        | "~" <expr:e1> {{ return makeList(newIDNode("opt1"), newIDNode("~"), e1) }}
        | "!" <expr:e1> {{ return makeList(newIDNode("opt1"), newIDNode("!"), e1) }}
        | "++" <expr:e1> {{ return makeList(newIDNode("opt1"), newIDNode("++"), e1) }}
        | "--" <expr:e1> {{ return makeList(newIDNode("opt1"), newIDNode("--"), e1) }}
        | <expr:e1> "++" {{ return makeList(newIDNode("opt1"), newIDNode("b++"), e1) }}
        | <expr:e1> "--" {{ return makeList(newIDNode("opt1"), newIDNode("b--"), e1) }}
        | "(" <expr:e1> ")" {{ return e1; }}
        ;

<call_arg>  =  <expr:e1> {{ return e1; }}
            |  [id:id] "=" <expr:e1> {{ return makeList(newIDNode("="), id.val, e1); }}
            ;

<call_args> = e {{ return newNull(); }}
            | <call_arg:arg> {{ return getList(arg); }}
            | <call_args:args> "," <call_arg:arg> {{ addBrother(args, getList(arg)); return args; }}
            ;

<macro_call_args> = e {{ return newNode(); }}
                  | <call_arg:arg> {{ return getList(arg); }}
                  | <macro_call:m> {{ return getList(m); }}
                  | <macro_call_args:args> "," <call_arg:arg> {{ addBrother(args, getList(arg)); return args; }}
                  | <macro_call_args:args> "," <macro_call:m> {{ addBrother(args, getList(m)); return args; }}
                  ;

<list> = <var_exp:v> {{ return v; }}
       | <full_list:v> {{ return v; }}
       | "!" <types:v> {{ return v; }}
       | <list:l> <var_exp:v> {{ addBrother(l, v); return l; }}
       | <list:l> <full_list:v> {{ addBrother(l, v); return l; }}
       | <list:l> "!" <types:v> {{ addBrother(l, v); return l; }}
       ;

<full_list> = "(" <list:l> ")" {{ return newParent(l); }}
            ;
