%{
class Node;
%}

%type Node* program package package_name module_def_keyword
%type Node* module_def_keyword module_def_statement func_def_name
%type Node* func_def_xs def_statement def_statements statements statement if_state while_state dowhile_state dountil_state for_state statement return_state woven_state block


%right "="
%right "&=" "|=" "^=" "<<=" ">>="
%right "+=" "-="
%right "*=" "/="
%left "&&" "||"
%left "&" "|" "^"
%left "<" ">" "<=" ">=" "=="
%left "+" "-"
%left "*" "/" "%"
%left "."
%right "~" "++" "--" "!"
%left "(" "[" ")" "]"


<program> = <def_statements:v> ;

<package> = "package" <package_name:pname> ";"
          ;

<package_name> = [id:name]
               | <package_name:before> "." [id:name]
               ;

<module_def_keyword> = "module"
                     | "class"
                     | "struct"
                     ;

<module_def_statement> = <module_def_keyword:key> [id:name] <block:def>
                        | <module_def_keyword:key> [id:name] ";"
                        ;

<func_def_name> = "static" {{ return "static"; }}
                | "extern" {{ return "extern"; }}
                | "virtual" {{ return "virtual"; }}
                | "abstract" {{ return "abstract"; }}
                | "in" {{ return "in"; }}
                | "out" {{ return "out"; }}
                ;

<func_def_xs> = <func_def_name:n>
			  | <func_def_xs:l> <func_def_name:n>
			  ;

<def_statement> = <var_def:v> ";" {{ return v; }}
                | <func_def:v>  {{ return v; }}
                | <marco_def:v> {{ return v; }}
                | <macro_call:v> {{ return v; }}
                | "`" <full_list:v> {{ return v; }}
                | <module_def_statement:v> {{ return v; }}
                | <func_def_xs:xs> <func_def:def>
                ;

<def_statements> = <def_statement:v>
                 | <def_statements:l> <def_statement:v>
                 ;

<statements> = <statement:v>
             | <statements:l> <statement:v>
             ;

<statement> = <def_statement:v>  {{ return v; }}
            | <expr:v> ";"  {{ return v; }}
            | <block:v>  {{ return v; }}
            | <if_state:v> {{ return v; }}
            | <while_state:v> {{ return v; }}
            | <dowhile_state:v> {{ return v; }}
            | <dountil_state:v> {{ return v; }}
            | <for_state:v> {{ return v; }}
            | <return_state:v> {{ return v; }}
            | <delete_expr:v> {{ return v; }}
            | "break" ";"
            | "continue" ";"
            ;

<if_state> = "if" "(" <expr:exp> ")" <statement:s>
           | "if" "(" <expr:exp> ")" <statement:s> "else" <statement:s2>
           ;

<while_state> = "while" "(" <expr:exp> ")" <statement:s>
              ;

<dowhile_state> = "do" <statement:s> "while" "(" <expr:exp> ")" ";"
                ;

<dountil_state> = "do" <statement:s> "until" "(" <expr:exp> ")" ";"
                ;

<for_state> = "for" "(" <expr:init> ";" <expr:pd> ";" <expr:work> ")" <statement:s>
            | "for" "(" <var_def:init> ";" <expr:pd> ";" <expr:work> ")" <statement:s>
            ;

<return_state> = "return" ";"
               | "return" <expr:exp> ";"
               ;

<woven_state> = "woven" [id:id] "(" <call_args:args> ")"
              ;

<block> = "{" <statements:s> "}"
        | "{" "}"
        ;

<types> = [id:id]
      | "const" [id:id]
      | "*" [id:id]
      | "const" "*" [id:id]
      | <types:t> [sz]
      ;

<var_def> = <types:t> [id:id]
          | <types:t> [id:id] "=" <expr:init>
          ;


<macro_def_args> = [id:id]
                 | <macro_def_args:args> "," [id:id]
                 ;

<marco_def> = "defmacro" [id:id] "(" <macro_def_args:args> ")" <block:b>
            ;

<macro_call> = "@" [id:id]
             | <macro_call:m> "(" <macro_call_args:args> ")"
             | <macro_call:m> <block:b>
             | <macro_call:m> [id:id] <block:b>
             ;

<func_def> = <types:t> <package_name:id> "(" <func_def_args:args> ")" <block:b>
           | <types:t> <package_name:id> "(" <func_def_args:args> ")" ";"
           ;

<func_def_args> = <var_def:v>
                | <func_def_args:args> "," <var_def:v>
                | e
                ;

<new_expr> = "new" <types:t>
           | "new" <types:t> "(" <call_args:args> ")"
           | <new_expr:n>    "[" <call_args:args> "]"
           ;

<delete_expr> = "delete" <expr:exp>
            | "delete" [sz] <expr:exp>
            ;

<numeric> = [int:i]
          | [float:f]
          ;

<var_exp> = [id:id]
          | <numeric:n>
          | [string:s]
          | "null"
          | "true"
          | "false"
          ;

<expr>  = <expr:e1> "=" <expr:e2>
        | <expr:e1> "(" <call_args:args> ")"
        | <expr:e1> "[" <call_args:args> "]"
        | <new_expr:v> {{ return v; }}
        | <var_exp:v> {{ return v; }}
        | <expr:e1> "==" <expr:e2>
        | <expr:e1> "!=" <expr:e2>
        | <expr:e1> "<=" <expr:e2>
        | <expr:e1> ">=" <expr:e2>
        | <expr:e1> "&&" <expr:e2>
        | <expr:e1> "||" <expr:e2>
        | <expr:e1> ">=" <expr:e2>
        | <expr:e1> "<" <expr:e2>
        | <expr:e1> ">" <expr:e2>
        | <expr:e1> "<" "<" <expr:e2>
        | <expr:e1> ">" ">" <expr:e2>
        | <expr:e1> "+" <expr:e2>
        | <expr:e1> "-" <expr:e2>
        | <expr:e1> "*" <expr:e2>
        | <expr:e1> "/" <expr:e2>
        | <expr:e1> "%" <expr:e2>
        | <expr:e1> "^" <expr:e2>
        | <expr:e1> "&" <expr:e2>
        | <expr:e1> "|" <expr:e2>
        | <expr:e1> "-=" <expr:e2>
        | <expr:e1> "*=" <expr:e2>
        | <expr:e1> "/=" <expr:e2>
        | <expr:e1> "%=" <expr:e2>
        | <expr:e1> "^=" <expr:e2>
        | <expr:e1> "&=" <expr:e2>
        | <expr:e1> "|=" <expr:e2>
        | <expr:e1> "<<=" <expr:e2>
        | <expr:e1> ">>=" <expr:e2>
        | <expr:e1> "." <expr:e2>
        | "-" <expr:e1>
        | "~" <expr:e1>
        | "!" <expr:e1>
        | "++" <expr:e1>
        | "--" <expr:e1>
        | <expr:e1> "++"
        | <expr:e1> "--"
        | "(" <expr:e1> ")"
        ;

<call_arg>  =  <expr:e1> {{ return e1; }}
            |  [id:id] "=" <expr:e1>
            ;

<call_args> = e
            | <call_arg:arg>
            | <call_args:args> "," <call_arg:arg>
            ;

<macro_call_args> = e
                  | <call_arg:arg>
                  | <macro_call:m>
                  | <macro_call_args:args> "," <call_arg:arg>
                  | <macro_call_args:args> "," <macro_call:m>
                  ;

<list> = <var_exp:v> {{ return v; }}
       | <full_list:v> {{ return v; }}
       | "!" <types:v> {{ return v; }}
       | <list:l> <var_exp:v>
       | <list:l> <full_list:v>
       | <list:l> "!" <types:v>
       ;

<full_list> = "(" <list:l> ")"
            ;
